{"version":3,"file":"main-4.0.1-810.js","mappings":"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","sources":["webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@jup-ag/terminal/./node_modules/ansicolors/ansicolors.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@jup-ag/terminal/./node_modules/bigint-buffer/dist/browser.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@jup-ag/terminal/./node_modules/bignumber.js/bignumber.mjs","webpack://@jup-ag/terminal/./node_modules/bignumber.js/bignumber.js","webpack://@jup-ag/terminal/./node_modules/base64-js/index.js","webpack://@jup-ag/terminal/./node_modules/base-x/src/index.js","webpack://@jup-ag/terminal/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","// ColorCodes explained: http://www.termsys.demon.co.uk/vtansi.htm\n'use strict';\n\nvar colorNums = {\n      white         :  37\n    , black         :  30\n    , blue          :  34\n    , cyan          :  36\n    , green         :  32\n    , magenta       :  35\n    , red           :  31\n    , yellow        :  33\n    , brightBlack   :  90\n    , brightRed     :  91\n    , brightGreen   :  92\n    , brightYellow  :  93\n    , brightBlue    :  94\n    , brightMagenta :  95\n    , brightCyan    :  96\n    , brightWhite   :  97\n    }\n  , backgroundColorNums = {\n      bgBlack         :  40\n    , bgRed           :  41\n    , bgGreen         :  42\n    , bgYellow        :  43\n    , bgBlue          :  44\n    , bgMagenta       :  45\n    , bgCyan          :  46\n    , bgWhite         :  47\n    , bgBrightBlack   :  100\n    , bgBrightRed     :  101\n    , bgBrightGreen   :  102\n    , bgBrightYellow  :  103\n    , bgBrightBlue    :  104\n    , bgBrightMagenta :  105\n    , bgBrightCyan    :  106\n    , bgBrightWhite   :  107\n    } \n  , open   =  {}\n  , close  =  {}\n  , colors =  {}\n  ;\n\nObject.keys(colorNums).forEach(function (k) {\n  var o =  open[k]  =  '\\u001b[' + colorNums[k] + 'm';\n  var c =  close[k] =  '\\u001b[39m';\n\n  colors[k] = function (s) { \n    return o + s + c;\n  };\n});\n\nObject.keys(backgroundColorNums).forEach(function (k) {\n  var o =  open[k]  =  '\\u001b[' + backgroundColorNums[k] + 'm';\n  var c =  close[k] =  '\\u001b[49m';\n\n  colors[k] = function (s) { \n    return o + s + c;\n  };\n});\n\nmodule.exports =  colors;\ncolors.open    =  open;\ncolors.close   =  close;\n","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };"],"names":["_assertThisInitialized","e","ReferenceError","colorNums","white","black","blue","cyan","green","magenta","red","yellow","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","backgroundColorNums","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bgBrightBlack","bgBrightRed","bgBrightGreen","bgBrightYellow","bgBrightBlue","bgBrightMagenta","bgBrightCyan","bgBrightWhite","open","close","colors","Object","keys","forEach","k","o","c","s","module","exports","_setPrototypeOf","t","setPrototypeOf","bind","__proto__","_inheritsLoose","prototype","create","constructor","defineProperty","value","toBigIntLE","buf","reversed","Buffer","from","reverse","hex","toString","length","BigInt","toBigIntBE","toBufferLE","num","width","buffer","padStart","slice","toBufferBE","_typeof","Symbol","iterator","_defineProperty","r","i","toPrimitive","call","TypeError","String","toPropertyKey","enumerable","configurable","writable","_extends","assign","n","arguments","hasOwnProperty","apply","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","z","j","charCodeAt","compare","x","y","b","xc","yc","l","intCheck","min","max","name","Error","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","BigNumber","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","random","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","sign","callerIsToString","pow","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","toStringTag","for","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","join","Uint8Array","Array","code","start","end","output","_Buffer","BASE_MAP","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","charCode","it3","it4","vch","allocUnsafe","fill","encode","isArray","isBuffer","pbegin","pend","b58","it1","it2","repeat","decode","string","_objectWithoutPropertiesLoose"],"sourceRoot":""}