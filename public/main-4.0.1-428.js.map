{"version":3,"file":"main-4.0.1-428.js","mappings":"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","sources":["webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/_md.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/crypto.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/utils.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/abstract/utils.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/abstract/curve.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/hmac.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/_shortw_utils.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/secp256k1.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/abstract/modular.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/sha3.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/sha256.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/_u64.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/sha512.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/abstract/edwards.js","webpack://@jup-ag/terminal/./node_modules/@noble/curves/esm/ed25519.js","webpack://@jup-ag/terminal/./node_modules/@noble/hashes/esm/_assert.js"],"sourcesContent":["/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField, } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { abytes, aexists, anumber, aoutput } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { byteSwap32, Hash, isLE, toBytes, u32, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\n/** Keccak sponge function. */\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n/** keccak-224 hash function. */\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nimport { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\n/** SHA2-512 hash function. */\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            abool('phflag', phflag);\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    // 0 <= n < MASK\n    // Coordinates larger than Fp.ORDER are allowed for zip215\n    function aCoordinate(title, n) {\n        ut.aInRange('coordinate ' + title, n, _0n, MASK);\n    }\n    function assertPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = memoized((p, iz) => {\n        const { ex: x, ey: y, ez: z } = p;\n        const is0 = p.is0();\n        if (iz == null)\n            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n        const ax = modP(x * iz);\n        const ay = modP(y * iz);\n        const zz = modP(z * iz);\n        if (is0)\n            return { x: _0n, y: _1n };\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    const assertValidMemo = memoized((p) => {\n        const { a, d } = CURVE;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = modP(X * X); // X²\n        const Y2 = modP(Y * Y); // Y²\n        const Z2 = modP(Z * Z); // Z²\n        const Z4 = modP(Z2 * Z2); // Z⁴\n        const aX2 = modP(X2 * a); // aX²\n        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = modP(X * Y);\n        const ZT = modP(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return true;\n    });\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            aCoordinate('x', ex);\n            aCoordinate('y', ey);\n            aCoordinate('z', ez);\n            aCoordinate('t', et);\n            Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            aCoordinate('x', x);\n            aCoordinate('y', y);\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        // Compare one point to another.\n        equals(other) {\n            assertPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            assertPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n            const { p, f } = this.wNAF(n);\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n        multiplyUnsafe(scalar, acc = Point.ZERO) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n            if (n === _0n)\n                return I;\n            if (this.is0() || n === _1n)\n                return this;\n            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            abool('zip215', zip215);\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // RFC8032 prohibits >= p, but ZIP215 doesn't\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            const max = zip215 ? MASK : Fp.ORDER;\n            ut.aInRange('pointHex.y', y, _0n, max);\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = Fp.BYTES;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        publicKey = ensureBytes('publicKey', publicKey, len);\n        if (zip215 !== undefined)\n            abool('zip215', zip215);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        let A, R, SB;\n        try {\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // Extended group equation\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { pippenger } from './abstract/curve.js';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd, } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n}))();\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ (() => twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n}))();\nexport const ed25519ph = /* @__PURE__ */ (() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: sha512,\n})))();\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    static msm(points, scalars) {\n        const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n        return pippenger(RistPoint, Fn, points, scalars);\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","/**\n * Internal assertion helpers.\n * @module\n */\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n//# sourceMappingURL=_assert.js.map"],"names":["Chi","a","b","c","Maj","HashMD","constructor","blockLen","outputLen","padOffset","isLE","super","this","finished","length","pos","destroyed","buffer","Uint8Array","view","update","data","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","fill","i","byteOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","globalThis","crypto","undefined","u32","arr","Uint32Array","floor","byteLength","createView","DataView","rotr","word","shift","byteSwap32","toBytes","str","TextEncoder","encode","utf8ToBytes","concatBytes","arrays","sum","pad","Hash","clone","wrapConstructor","hashCons","hashC","msg","tmp","create","randomBytes","bytesLength","getRandomValues","_0n","_1n","_2n","isBytes","ArrayBuffer","isView","name","abytes","item","abool","title","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","_0","_9","A","F","f","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","char","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","numberToBytesLE","ensureBytes","expectedLength","e","isPosBig","inRange","max","aInRange","bitLen","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","isArray","field","object","Fp","isValid","hash","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","memoized","fn","map","WeakMap","arg","args","computed","constTimeNegate","condition","neg","negate","validateW","W","bits","calcWOpts","windows","ceil","windowSize","pointPrecomputes","pointWindowSizes","getW","P","wNAF","hasPrecomputes","elm","unsafeLadder","p","ZERO","d","add","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","wNAFUnsafe","acc","curr","getPrecomputes","transform","comp","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","pippenger","fieldN","scalars","forEach","validateMSMPoints","s","validateMSMScalars","zero","MASK","buckets","BITS","j","scalar","resI","sumI","validateBasic","curve","Gx","Gy","nBitLength","nByteLength","freeze","ORDER","HMAC","_key","key","iHash","oHash","buf","getPrototypeOf","hmac","message","validateSigVerOpts","opts","lowS","prehash","b2n","h2b","DERErr","m","DER","Err","_tlv","tag","E","dataLen","lenLen","decode","first","lengthBytes","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","r","hexFromSig","sig","seq","_3n","weierstrass","curveDef","CURVE","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","BYTES","uncompressedLen","modN","invN","ProjectivePoint","Point","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","eql","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","x","y","tail","x2","sqr","x3","mul","lengths","N","includes","error","assertPrjPoint","other","toAffineMemo","iz","px","py","pz","z","ONE","is0","inv","ax","ay","zz","assertValidMemo","left","right","fromAffine","normalizeZ","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","multiply","msm","_setWindowSize","wnaf","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","multiplyUnsafe","sc","I","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","Q","G","cofactor","toRawBytes","isCompressed","toHex","_bits","weierstrassPoints","cat","head","y2","sqrt","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","number","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","precompute","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","k2sig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","q","normS","prepSig","C","drbg","verify","signature","publicKey","sg","format","isHex","isObj","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","Fpk1","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","root","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c1","c2","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","invert","u","isNegativeLE","FIELD_FIELDS","validateField","reduce","nLength","_nBitLength","Field","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","p1div4","nv","legendreC","S","Z","Q1div2","g","ge","tonelliShanks","FpSqrt","lst","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","t","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","enableXOF","rounds","posOut","state32","keccak","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","SHA256_K","SHA256_IV","SHA256_W","SHA256","D","H","getUint32","W15","W2","s0","s1","T1","T2","sha256","U32_MASK64","fromBig","le","split","Ah","Al","rotlSH","rotlSL","rotlBH","rotlBL","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","VERIFY_DEFAULT","zip215","ED25519_P","ED25519_SQRT_M1","adjustScalarBytes","uvRatio","v3","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","ed25519_pow_2_252_3","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","domain","mapToCurve","cHash","modP","ctx","phflag","aCoordinate","assertPoint","ex","ey","ez","X","Y","et","T","Z4","aX2","X1Z2","X2Z1","Y1Z2","Y2Z1","x1y1","T3","isSmallOrder","normed","lastByte","isXOdd","isLastByteOdd","getExtendedPublicKey","modN_LE","hashed","pointBytes","hashDomainToScalar","context","verifyOpts","options","SB","ExtendedPoint","anumber","ahash","aexists","instance","checkFinished","aoutput"],"sourceRoot":""}