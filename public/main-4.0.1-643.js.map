{"version":3,"file":"main-4.0.1-643.js","mappings":"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","sources":["webpack://@jup-ag/terminal/./node_modules/@solana/web3.js/lib/index.browser.esm.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\n\nfunction requireFastStableStringify () {\n\tif (hasRequiredFastStableStringify) return fastStableStringify$1;\n\thasRequiredFastStableStringify = 1;\n\tvar objToString = Object.prototype.toString;\n\tvar objKeys = Object.keys || function(obj) {\n\t\t\tvar keys = [];\n\t\t\tfor (var name in obj) {\n\t\t\t\tkeys.push(name);\n\t\t\t}\n\t\t\treturn keys;\n\t\t};\n\n\tfunction stringify(val, isArrayProp) {\n\t\tvar i, max, str, keys, key, propVal, toStr;\n\t\tif (val === true) {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (val === false) {\n\t\t\treturn \"false\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t\t} else {\n\t\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\t\tstr = '[';\n\t\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + ']';\n\t\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t\t// only object is left\n\t\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\t\tmax = keys.length;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"function\":\n\t\t\tcase \"undefined\":\n\t\t\t\treturn isArrayProp ? null : undefined;\n\t\t\tcase \"string\":\n\t\t\t\treturn JSON.stringify(val);\n\t\t\tdefault:\n\t\t\t\treturn isFinite(val) ? val : null;\n\t\t}\n\t}\n\n\tfastStableStringify$1 = function(val) {\n\t\tvar returnVal = stringify(val, false);\n\t\tif (returnVal !== undefined) {\n\t\t\treturn ''+ returnVal;\n\t\t}\n\t};\n\treturn fastStableStringify$1;\n}\n\nvar fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.0.0-maintenance\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const {\n      context,\n      value: {\n        blockhash\n      }\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature() {\n        throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');\n      },\n      toJSON() {\n        return {};\n      }\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator\n      }\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                args,\n                error: e\n              });\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n"],"names":["generatePrivateKey","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","this","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","super","enum","keys","length","Error","map","key","Map","_PublicKey","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","value","_bn","undefined","isPublicKeyData","decoded","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","property","rustString","rsl","_decode","bind","_encode","rslShim","offset","str","chars","span","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","numWritableSignedAccounts","numWritableUnsignedAccounts","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","transactionLogs","transactionError","cachedLogs","getLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","async","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SystemInstruction","decodeInstructionType","checkProgramId","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","authorized","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","getSlot","slot","round","MS_PER_SLOT","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","getDefaultExportFromCjs","__esModule","fastStableStringify$1","hasRequiredFastStableStringify","requireFastStableStringify","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","returnVal","fastStableStringify","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","generate_request_id","url","rpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","notify","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","result","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","unsafeRes","res","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getLatestBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","msgHash","privKey","toCompactRawBytes","recovery","ecdsaSign","_Lockup","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","lockup","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","voteInit","InitializeAccount","voteAuthorizationType","voteAuthorizeWithSeedArgs","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sourceRoot":""}